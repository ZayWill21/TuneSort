name: Build and Deploy to EKS

on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - 'Dockerfile'
      - 'kubernetes/**'
      - '.github/workflows/deploy.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'src/**'
      - 'Dockerfile'
      - 'kubernetes/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  AWS_REGION: us-west-2 # Update to your preferred region
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY_NAME || 'eks-cluster-repository' }} # From Terraform output
  EKS_CLUSTER_NAME: ${{ vars.EKS_CLUSTER_NAME || 'eks-cluster-cluster' }} # From Terraform output
  IMAGE_TAG: ${{ github.sha }}

permissions:
  id-token: write
  contents: read

jobs:
  build-and-push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    outputs:
      image-uri: ${{ steps.build-image.outputs.image-uri }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and Push Image
        id: build-image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            APP_ENV=${{ github.event.inputs.environment || 'dev' }}

      - name: Set Image URI Output
        id: set-output
        run: |
          echo "image-uri=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT

      - name: Scan Image for Vulnerabilities
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'

      - name: Upload Scan Results
        if: github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-to-eks:
    name: Deploy to EKS
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.27.3' # Match your EKS version

      - name: Set Kubernetes Context
        run: |
          kubectl config use-context $(kubectl config get-contexts -o name | grep ${{ env.EKS_CLUSTER_NAME }})
          kubectl get nodes

      - name: Create Namespace if not exists
        run: |
          kubectl create namespace ${{ github.event.inputs.environment || 'dev' }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy to Kubernetes
        run: |
          # Replace image tag in deployment files
          find kubernetes/ -type f -name "*.yaml" -exec sed -i 's|${ECR_REPOSITORY}|${{ needs.build-and-push.outputs.image-uri }}|g' {} \;
          
          # Apply Kubernetes manifests
          kubectl apply -f kubernetes/ -n ${{ github.event.inputs.environment || 'dev' }}
          
          # Verify deployment
          kubectl rollout status deployment/app-deployment -n ${{ github.event.inputs.environment || 'dev' }} --timeout=180s

      - name: Deployment Summary
        run: |
          echo "## Deployment Complete âœ…" >> $GITHUB_STEP_SUMMARY
          echo "* **Environment:** ${{ github.event.inputs.environment || 'dev' }}" >> $GITHUB_STEP_SUMMARY
          echo "* **Image:** ${{ needs.build-and-push.outputs.image-uri }}" >> $GITHUB_STEP_SUMMARY
          echo "* **EKS Cluster:** ${{ env.EKS_CLUSTER_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "* **Deployed by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "* **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
